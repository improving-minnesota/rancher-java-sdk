package io.rancher.service

import io.rancher.base.TypeCollection
import io.rancher.type.{{.class}}{{range $import := .meta.ListActionImports}}
import {{$import}}{{end}}
import retrofit2.Call
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.PUT
import retrofit2.http.Path
import retrofit2.http.QueryMap

interface {{.class}}Api { {{ range $index, $elem := .collectionMethods }}{{if eq $elem "GET" }}
  @GET("{{$.type}}")
  Call<TypeCollection<{{$.class}}>> list()

  @GET("{{$.type}}")
  Call<TypeCollection<{{$.class}}>> query(@QueryMap Map<String, String> filters){{ else if eq $elem "POST" }}

  @POST("{{$.type}}")
  Call<{{$.class}}> create(@Body {{$.class}} {{$.type}}){{ end }}{{ end }}
  {{ range $index, $elem := .resourceMethods }}{{ if eq $elem "GET" }}
  @GET("{{$.type}}/{id}")
  Call<{{$.class}}> findById(@Path("id") String id){{ else if eq $elem "PUT" }}

  @PUT("{{$.type}}/{id}")
  Call<{{$.class}}> update(@Path("id") String id, @Body {{$.class}} {{$.type}}){{ else if eq $elem "DELETE" }}

  @DELETE("{{$.type}}/{id}")
  Call<{{$.class}}> delete(@Path("id") String id){{ end }}{{ end }}{{range $key, $value := .resourceActions}}

  @POST("{{$.type}}/{id}?action={{$key}}"){{if eq $value.Input "" }}
  Call<{{.Output | capitalize}}> {{$key}}(@Path("id") String id){{else}}
  Call<{{.Output | capitalize}}> {{$key}}(@Path("id") String id, @Body {{.Input | capitalize}} {{.Input}}){{end}}{{end}}
}
