package io.rancher.service;

import java.util.HashMap;
import io.rancher.base.TypeCollection;
import io.rancher.type.{{$.class}};{{range $import := .meta.ListActionImports}}
import {{$import}};{{end}}

import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.QueryMap;

public interface {{.class}}Service {

  @GET("{{.type}}")
  Call<TypeCollection<{{.class}}>> list();

  @GET("{{.type}}")
  Call<TypeCollection<{{.class}}>> list(@QueryMap HashMap<String,String> filters);

  @GET("{{.type}}/{id}")
  Call<{{.class}}> get(@Path("id") String id);

  @POST("{{.type}}")
  Call<{{.class}}> create(@Body {{.class}} {{.type}});

  @PUT("{{.type}}/{id}")
  Call<{{.class}}> update(@Path("id") String id, @Body {{.class}} {{.type}});

  @DELETE("{{.type}}/{id}")
  Call<Void> delete(@Path("id") String id);
  {{range $key, $value := .resourceActions}}
  @POST("{{$.type}}/{id}?action={{$key}}"){{if eq $value.Input "" }}
  Call<{{.Output | capitalize}}> {{$key}}(@Path("id") String id);
  {{else}}
  Call<{{.Output | capitalize}}> {{$key}}(@Path("id") String id, @Body {{.Input | capitalize}} {{.Input}});
  {{end}}{{end}}
}
